/* The Computer Language Benchmarks Game
* http://benchmarksgame.alioth.debian.org/
*
* Contributed by Jon Harrop
* Modified by Alex Mizrahi
* Modified by Andreas Schäfer
* Modified by aardsplat-guest
*/

#include <iostream>
#include <algorithm>
#include <future>
#include <vector>

#include <boost/pool/object_pool.hpp>

constexpr int threads{16};

struct Node {
   Node *l,*r;
   int i;
   Node(int i) : l(0),r(0),i(i) {}
   Node(Node *l,int i,Node *r) : l(l),r(r),i(i) {}
   int check() const
   {
      if (l)
         return l->check() + i - r->check();
      else return i;
   }
};

using Node_pool = boost::object_pool<Node>;

Node *make(int i,int d,Node_pool& pool)
{
   if (d==0)
      return pool.construct(i);
   return pool.construct(make(2*i-1,d-1,pool),i,make(2*i,d-1,pool));
}

int make_iteration(int from,int to,int d,bool thread)
{
   int c{0};
   if (thread) {
      std::vector<std::future<int>>futures{};
      for (int j=0; j<threads; ++j) {
         int span{(to-from+1)/threads};
         futures.emplace_back(std::async(std::launch::async,
            make_iteration,from+span*j,span+span*j,d,false));
      }
      for (auto& fti : futures) {
         c += fti.get();
      }
   }
   else {
      Node_pool pool;
      for (int i=from; i<=to; ++i) {
         Node *a = make(i,d,pool),*b = make(-i,d,pool);
         c += a->check() + b->check();
      }
   }
   return c;
}

int main(int argc,char *argv[])
{
   int min_depth = 4,
      max_depth = std::max(min_depth+2,
         (argc == 2 ? atoi(argv[1]) : 10)),
      stretch_depth = max_depth+1;

   {
      Node_pool pool;
      Node *c = make(0,stretch_depth,pool);
      std::cout << "stretch tree of depth " << stretch_depth << "\t "
         << "check: " << c->check() << std::endl;
   }

   Node_pool long_lived_pool;
   Node *long_lived_tree=make(0,max_depth,long_lived_pool);

   for (int d=min_depth; d<=max_depth; d+=2) {
      int iterations = 1 << (max_depth - d + min_depth);
      int   c=0;
      c = make_iteration(1,iterations,d,true);
      std::cout << (2*iterations) << "\t trees of depth " << d << "\t "
         << "check: " << c << std::endl;
   }

   std::cout << "long lived tree of depth " << max_depth << "\t "
      << "check: " << (long_lived_tree->check()) << "\n";

   return 0;
}
