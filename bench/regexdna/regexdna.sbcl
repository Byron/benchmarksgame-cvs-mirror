;;; The Computer Language Benchmarks Game
;;; http://benchmarksgame.alioth.debian.org/
;;;
;;; contributed by Shyamal Prasad


(eval-when (:compile-toplevel :load-toplevel :execute)
  (require :asdf)
  (require :cl-ppcre))

(defparameter *regex-list*
  (list
   "agggtaaa|tttaccct"
   "[cgt]gggtaaa|tttaccc[acg]"
   "a[act]ggtaaa|tttacc[agt]t"
   "ag[act]gtaaa|tttac[agt]ct"
   "agg[act]taaa|ttta[agt]cct"
   "aggg[acg]aaa|ttt[cgt]ccct"
   "agggt[cgt]aa|tt[acg]accct"
   "agggta[cgt]a|t[acg]taccct"
   "agggtaa[cgt]|[acg]ttaccct"))

(defparameter *alternatives*
  '(("B" "(c|g|t)")  ("D" "(a|g|t)")
    ("H" "(a|c|t)")  ("K" "(g|t)")
    ("M" "(a|c)")    ("N" "(a|c|g|t)")
    ("R" "(a|g)")    ("S" "(c|t)")
    ("V" "(a|c|g)")  ("W" "(a|t)")
    ("Y" "(c|t)")))


;; Read in the entire file as the benchmark specifieds
(defun get-input-chars (stream)
  (with-output-to-string
    (output)
    (loop while (multiple-value-bind
		    (line missing) (read-line stream nil)
		  (when line (write-string line output))
		  (unless missing (write-char #\Newline output))
		  line))))
			 


(defun main (&optional (stream *standard-input*))
  (let*
      ;; Benchmark definition requires using a regex to
      ;; remove headers/newlines from the file
      ((text (get-input-chars stream))
       (sequence
	(cl-ppcre:regex-replace-all ">[^\\n]*\\n|\\n" text "")))

    ;; Count and print the number of subsequences
    (loop for regex in *regex-list* do
	  (format t "~a ~a~%" regex
		  (/ (length (cl-ppcre:all-matches regex sequence)) 2)))
    
    ;; Print lengths
    (format t "~%~a~%" (length text))
    (format t "~a~%" (length sequence))

    ;; do the alternative substitution and create the new text string
    ;; that the benchmark definition requires
    (loop for pair in *alternatives* do
	  (setf sequence
		(cl-ppcre:regex-replace-all (car pair) sequence (cadr pair))))
    (format t "~a~%" (length sequence))))
