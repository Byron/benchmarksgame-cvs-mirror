/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Tim Hochberg.
   
   Some ideas taken from Olof Kraigher's Python and GHC implementations
   and Ben St. John's GCC implementation.
*/


module meteor

import StdEnv, LanguageShootout, StdLib, StdStrictLists


Start 
    = toString (length solns) +++ " solutions found\n\n"
    +++ format (hd solns) +++ "\n"
    +++ format (last solns) +++ "\n"
where
    solns =  (sort (take argi [x \\ x <|- solutions]))
     

// --- Generate the solutions --- 

firstZero :: {#Int}
firstZero =: {0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5}

solutions =: solveCell 0 [#c \\ c <- COLORS!] 0 [#!] [!]
  where
    solveCell ::  !Int [#Int!] !Int !Solution *[!String] -> *[!String]
    solveCell _  [#!]  _  soln results
        = [!s, revString s:results] with s = toString soln
    solveCell row todo board soln results
        #! top = board bitand M_TOP
        | top == M_TOP
            = solveCell (row+1) todo (board >> N_COL) soln results 
        #! col = firstZero.[top]
        #! masks = masksAtCell.[row].[col]
        | otherwise
            = foldr solveMask results [m \\ c <|- todo, m  <|- masks.[c] | board bitand m == 0]
      where
        solveMask :: !Int *[!String] -> *[!String]
        solveMask m results 
            = solveCell row (remove (tagof m) todo) ((untag m) bitor board) [#m:soln!] results
    remove:: Int !u:[#Int!] -> u:[#Int!]
    remove e [#a:as!]
        | a==e		= as
                    = [#a:remove e as!]
    remove e [#!] = [#!]
              


// --- Formatting ---
    
:: Solution :== [#Int!]
    
format :: String -> String
format raw = format_ [c \\ c <-: raw] False
  where
    format_ :: [Char] Bool -> String 
    format_ [] _ = ""
    format_ chars isodd
        # (cur, rest) = splitAt 5 chars
        # spaced = flatten [[c, ' '] \\ c <- cur]
        # str = {c \\ c <- spaced} +++ "\n" +++ format_ rest (not isodd)
        = (if isodd " " "") +++ str

instance toString Solution
  where
    toString :: Solution -> {#Char}
    toString masks = {color n \\ n <- CELLS} where
        color n = "0123456789.".[if (isNothing x) 10 ((tagof o snd o fromJust) x)] where
            x =  find matches masksWithRows
            matches (r, m)
                # n` = n - N_COL * r
                | n` < 0     = False
                | n` > 30    = False
                | otherwise = (untag m) bitand (1 << n`) <> 0  
        // The row associated with each mask is implicit in the order that appears
        masksWithRows = withRows 0 0 (reverse  [m \\ m<|-masks])                
        withRows _ _ [] = []
        withRows board r [m:rest]
            # delta = first0 board / N_COL
            # board = (board >>  (delta * N_COL)) bitor (untag m)
            # r = r+delta 
            = [(r, m):withRows board r rest]
     
revString :: u:{#Char} -> u:{#Char}
revString a 
    # (n, a) = usize a
    = {createArray n ' ' & [i]=c \\ c <-: a & i <- [n-1,n-2..0]}


// --- The Board ---
N_ELEM :== 5
N_COL :== 5
N_ROW :== 10
M_TOP :== 0x1F
CELLS =: [0..49]
COLORS =: [0..9] 

cellAt x y :== x + N_COL*y 
coordOf i :== (i rem N_COL, i / N_COL)
isValid x y :== 0 <= x && x < N_COL && 0 <= y && y < N_ROW


// --- Piece Operations ---

:: Dir = E | NE | NW | W | SW | SE
DIRECTIONS =: [E, NE, NW, W, SW, SE]

:: Piece :== [Dir]

pieces :: {Piece}
pieces =: { [E, E, E, SE]
          , [SE, SW, W, SW]
          , [W, W, SW, SE]
          , [E , E, SW, SE]
          , [NW, W, NW, SE, SW]
          , [E, E, NE, W]
          , [NW, NE, NE, W]
          , [NE, SE, E, NE]
          , [SE, SE, E, SE]
          , [E, NW, NW, NW]
          }

permutations p = take 12 (perms p) 
  where
    perms p = [p, (flip p): perms (rotate p)] 
    rotate piece = map r piece
      where r E  = NE
            r NE = NW
            r NW = W
            r W  = SW
            r SW = SE
            r SE = E
    flip piece = map f piece
      where f E  = W
            f NE = NW
            f NW = NE
            f W  = E
            f SW = SE
            f SE = SW


// --- Mask Operations ----

// Most of the time we only use 25 bits of a mask
// so we store info in a 5 bit tag.
set   mask n :== mask bitor (1 << n)
test1 mask n :== mask bitand (1 << n) <> 0
test0 mask n :== mask bitand (1 << n) == 0
retag mask n :== (mask bitand 0x1ffffff) bitor n << 25
tagof mask   :==  (mask >> 25)
tag   mask n :== mask bitor (n << 25)
untag mask   :== (mask bitand 0x1ffffff) 

count1s :: !Int -> Int
count1s 0 = 0
count1s i = (if (i bitand 1 == 1) 1 0) + count1s (i >> 1)

first0 :: !Int -> Int
first0 i = if (i bitand 1 == 0) 0 (1 + first0 (i >> 1))


// --- Making the Bitmasks --- 
    
instance mod Int
  where mod a b = if (r < 0) (r + b) r with r = a rem b
        
move :: !Dir (!Int, !Int) -> (!Int, !Int)
move E  (x, y) = (x+1, y)
move W  (x, y) = (x-1, y)
move NE (x, y) = (x+(y mod 2), y-1)
move NW (x, y) = (x+(y mod 2)-1, y-1)
move SE (x, y) = (x+(y mod 2), y+1)
move SW (x, y) = (x+(y mod 2)-1, y+1)

packSize a b :== a*5+b
unpackSize n :== (n/5, n rem 5)


pieceBounds piece isodd :== bounds piece 0 y0 0 y0 0 y0 with y0 = (if isodd 1 0)
  where
    bounds [] _ _ xmin ymin xmax ymax = (xmin, ymin, xmax, ymax) 
    bounds [d:rest] x y xmin ymin xmax ymax
        # (x, y) = move d (x, y)
        = bounds rest x y (min x xmin) (min y ymin) (max x xmax) (max y ymax)


pieceMask piece 
    # (xmin, ymin, xmax, ymax) = pieceBounds piece False
    # (x1, y1) = (~xmin, ~ymin)
    # swap = y1 rem 2 <> 0
    # w1 = xmax - xmin
    # h1 = ymax - ymin
    # (xmin, ymin, xmax, ymax) = pieceBounds piece True
    # (x2, y2) = (~xmin, ~ymin+1)
    # w2 = xmax - xmin
    # h2 = ymax - ymin
    | swap      = (tag (mask piece x2 y2 0) (packSize w2 h2), tag (mask piece x1 (y1+1) 0 >> N_COL) (packSize w1 h1)) 
    | otherwise = (tag (mask piece x1 y1 0) (packSize w1 h1), tag (mask piece x2 (y2+1) 0 >> N_COL) (packSize w2 h2)) 
  where
    mask [] x y m = m bitor (1 << cellAt x y)
    mask [d:rest] x y m  
        = mask rest x` y` (m bitor (1 << cellAt x y))
                           with (x`, y`) = move d (x, y)


templatesForColor c = (unzip o map pieceMask) perms
    where perms = if (c == 5) (take 6 ps) ps
          ps = permutations pieces.[c]
    
    
masksForColor :: !Int -> [(!Int, !Int)]
masksForColor c = flatten [atCell n \\ n <- CELLS] 
  where
    (even, odd) = templatesForColor c
    atCell n
        # (x, y) = coordOf n
        | isEven y = [(y, retag (m << x) c) \\ m <- even | isok m x y]
        | isOdd y  = [(y, retag (m << x) c) \\ m <- odd  | isok m x y]
    isok mask x y 
        # (width, height) = unpackSize (tagof mask) 
        # mask = untag mask << x 
        =    isValid (x+width) (y+height)
          && case (y == 0, y+height==9) of
                (False, False) = noLeftIslands mask && noRightIslands mask
                (True, False)  = noIslands mask
                (False, True)  = noIslands (mask << (N_COL*(y - 4)))


:: MaskData :== {!{!{![#Int!]}}} 
          
masksAtCell :: MaskData
masksAtCell =: transpose {let mc = masksForColor c in {m \\ m <- masksAt mc CELLS} \\ c <- COLORS} 
  where
    masksAt :: ![(Int, Int)] ![Int] -> [[#Int!]]
    masksAt masks [] = []
    masksAt masks [n:ns] = [[#snd x \\ x <- t!]:masksAt f ns] 
      where 
        (t, f) = partition test masks  
        test (r, m) = n` >= 0 && n` < 25 && (untag m) bitand (1 << n`) <> 0
                    with n` = n - N_COL * r
    transpose ::{{[#Int!]}} -> MaskData                    
    transpose a = {copy.[y] \\ y <- [1,0,1,0,1,2,3,4,5,6]}
      where
        copy :: MaskData
        copy = {{{[#x \\ x <|- a.[i].[cellAt x y]!] \\ i <- COLORS} \\ x <- [0..N_COL-1]} \\ y <- [1,2,5,6,7,8,9]}

    

// --- Looking for Islands ---
    
noLineIslands mask start stop step
    # n = find test1 start step mask 
    # n = find test0 n     step mask
    # n = find test1 n     step mask
    | n > stop  = True
    | otherwise = False
  where
    find test n dn mask
        | n >= 25       = 25
        | test mask n   = n
        | otherwise     = find test (n+dn) dn mask    
noLeftIslands mask   :== noLineIslands mask 0  20 5
noRightIslands mask  :== noLineIslands mask 4  24 5
    
noIslands board :== noisles board (count1s board)
  where  
    noisles :: !Int !Int  -> Bool
    noisles _ 30 = True
    noisles board ones   
        # board = fill board (coordOf (first0 board))
        # ones` = count1s board
        | (ones` - ones) rem N_ELEM <> 0    = False
        | otherwise                         = noisles board ones` 
    fill :: !Int !(!Int, !Int) -> Int 
    fill m (x, y)
        | x < 0 || x >= N_COL = m
        | y < 0 || y >= 6     = m
        # i = cellAt x y
        | test1 m i			  = m
        = foldl (\m d -> fill m (move d (x, y))) (set m i) DIRECTIONS

