
Description="Ruby"

Identifiers=[[ [a-zA-Z_][\w\-]* ]]

Digits=[[ (?:0x|0X|0b)[0-9a-fA-F]+|\d*[\.\_]?\d+(?:[eE][\-\+]\d+)?[lLuU]? ]]

Keywords={
  { Id=1,
    List={"alias", "and", "begin", "begin", "break", "case", "class", "def", "defined", "loop", "do", "else", "elsif", "end", "end", "ensure", "false", "for", "if", "in", "module", "next", "nil", "not", "or", "redo", "rescue", "retry", "return", "require", "self", "super", "then", "true", "", "undef", "unless", "", "until", "when", "while", "yield", "true", "false", "nil", "stdin", "stdout", "stderr", "env", "argf", "argv", "data", "version", "ruby-release-date", "ruby-platform", "include", "extend", "eval"},
  },
  { Id=3,
   List = {"TRUE","FALSE","NIL","STDIN","STDOUT","STDERR","ENV","ARGF","ARGV","DATA","RUBY_VERSION","RUBY_RELEASE_DATE","RUBY_PLATFORM"}
  },
  { Id=2,
    Regex=[[[\$\@][\/\w]+]],
  },
  { Id=3,
    Regex=[[m?\/.*?\/|(s|tr)\/.*?\/.*?\/[cegimosx]*]],
    Group=0,
  },
  { Id=3,
    Regex=[[\:\w+]],
  },
  { Id=4,
    Regex=[[(\w+)\s*\(]],
  },
}

-- hereDoc opening delimiter, see OnStateChange to handle end of string
Strings={
  Delimiter=[["|'|`|<<[\-"'`]?[\w_]+["'`]?]],
  Interpolation = [[ \{[^}]*\} ]],

  DelimiterPairs= {
    { Open=[[%q\(]], Close=[[\)]] },
    { Open=[[%Q\(]], Close=[[\)]] },
    { Open=[[%\(]], Close=[[\)]] },
    { Open=[[%x\(]], Close=[[\)]] },
  }
}

IgnoreCase=false

Comments={
  { Block=false,
    Delimiter= { [[#]] },
  },
  { Block=true,
    Nested=false,
    Delimiter= { [[\=begin]],[[\=end]] }
  }
}

Operators=None

-- resolve issue with # which starts comments and extrapolation sequences in strings
function OnStateChange(oldState, newState, token)
   if string.sub(token,1,1)=="#" and oldState==HL_STRING  then
      return HL_INTERPOLATION
   end
   if token==")" and oldState~=HL_STRING  then
      return HL_OPERATOR
   end
  
   --recognize hereDoc multine strings
   --do not clear hereDoc if token is ",' or `
   if (oldState==HL_STANDARD or oldState==HL_STRING) and newState==HL_STRING and not string.find("\"'`", token) then
      hereDoc = string.match(token, "<<[%-\"'`]?([%a_]+)" )
   end

   if oldState==HL_STRING and token==hereDoc then
      hereDoc = nil
      return HL_STRING_END
   end
   
   return newState
end
