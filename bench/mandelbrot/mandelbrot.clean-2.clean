/*
	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/
	Based on the SML version, written by Matthias Blume,
	and the Clean program, written by Diederik van Arkel.
	Contributed by John van Groningen
*/

module mandelbrot

import StdEnv,LanguageShootout

Start world
	# (console, world)	= stdio world
	  width				= argi
	  console			= console <<< "P4\n" <<< width <<< " " <<< width <<< "\n"
	  console			= loop_y 0 console width width
	= snd (fclose console world)

max_iter :== 50

loop_y :: !Int !*File !Int !Int -> *File
loop_y y file width height
	| y<width
		= loop_y (y+1) (loop_x 0 y 0 8 file width height) width height
		= file

loop_x :: !Int !Int !Int !Int !*File !Int !Int -> *File
loop_x x y bits bit_shift file width height
	| x<height
		| bit_shift==0
			= loop_x x y 0 8 (fwritec (toChar bits) file) width height
			# (w,h) = (toReal width,toReal height)
			  c = (2.0*toReal x/w - 1.5, 2.0*toReal y/h - 1.0)
			  point = fractal (0.0,0.0) max_iter c
			= loop_x (x+1) y (bits+bits+point) (bit_shift-1) file width height
		| bit_shift<8
			= fwritec (toChar (bits<<bit_shift)) file
			= file

fractal :: !(!Real,!Real) !Int !(!Real,!Real) -> Int
fractal (r,i) iter c=:(cr,ci)
	# (r2,i2) = (r*r,i*i)
	| r2 + i2 <= 4.0
		| iter > 0	= let pri=r*i in fractal (r2-i2+cr,pri+pri+ci) (iter-1) c
					= 1
		= 0
