/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
   transliterated from Miha Vučkovič's Haskell program
*/

module fannkuchredux

import StdEnv,LanguageShootout

flop [2,x1:t] = [x1,2:t]
flop [3,x1,x2:t] = [x2,x1,3:t]
flop [4,x1,x2,x3:t] = [x3,x2,x1,4:t]
flop [5,x1,x2,x3,x4:t] = [x4,x3,x2,x1,5:t]
flop [6,x1,x2,x3,x4,x5:t] = [x5,x4,x3,x2,x1,6:t]
flop [7,x1,x2,x3,x4,x5,x6:t] = [x6,x5,x4,x3,x2,x1,7:t]

flop lst=:[h:_] = r where
   (t, r) = flop2 h (lst, t)
   flop2 0 (t, r) = (t, r)
   flop2 n ([h:t], r) = flop2 (n-1) (t, [h:r])
	
flopS [1:_] = 0
flopS lst = 1 + flopS (flop lst)	

rotate n [h:t] = rotate2 (n-1) t where
   rotate2 0 l = [h:l]
   rotate2 n [f:t] = [f:(rotate2 (n-1) t)]
	
checksum i f
   | i rem 2 == 0 = f
                  = ~f    
                                 
pfold r [] = r
pfold (ac, af) [(c, f):t]
   #! sc = ac+c
   #! sf = max af f  
   = pfold (sc, sf) t 
	                                  
permut n = foldr perm [[1..n]] [2..n] where
   perm x lst = flatten [take x (iterate (rotate x) l) \\ l <- lst]   
		
Start world
   # n = argi 
     (chksm, mflops) = pfold (0,0) (map 
        (\(i, p) = let flops = flopS p in (checksum i flops, flops)) 
           (zip2 [0..] (permut n)) )  
               
   = toString chksm +++ "\n" +++ 
     "Pfannkuchen(" +++ toString n +++ ") = " +++ toString mflops +++ "\n"	  

