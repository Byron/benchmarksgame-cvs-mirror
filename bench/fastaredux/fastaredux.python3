# The Computer Language Benchmarks Game
# http://benchmarksgame.alioth.debian.org/
#
# contributed by Josh Goldfoot

import sys, array, multiprocessing

IM = 139968
IA = 3877
IC = 29573
LINE_LEN = 60
LOOKUP_SIZE = 4096
LOOKUP_SCALE = LOOKUP_SIZE - 1

alu = (
   'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'
   'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'
   'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'
   'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'
   'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'
   'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'
   'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA')

def repeat_fasta(src, title, n):
    # Taken from https://benchmarksgame.alioth.debian.org/u64q/program.php?test=fasta&lang=python3&id=3
    width = 60
    nprint = sys.stdout.buffer.write
    nprint(title)

    is_trailing_line = False
    count_modifier = 0.0

    len_of_src = len(src)
    ss = src + src + src[:n % len_of_src]
    s = bytearray(ss, encoding='utf8')

    if n % width:
        is_trailing_line = True
        count_modifier = 1.0
    count = 0
    end = (n / float(width)) - count_modifier
    while count < end:
        i = count*60 % len_of_src
        nprint(s[i:i+60] + b'\n')
        count += 1
    if is_trailing_line:
        nprint(s[-(n % width):] + b'\n')

def fill_lookup(lookup, ac):
    p = 0
    for i in range(len(ac)):
        p += ac[i].p
        ac[i].c = p * LOOKUP_SCALE
    ac[-1].c = LOOKUP_SIZE - 1;
    j = 0
    for i in range(LOOKUP_SIZE):
        while ac[j].c < i:
            j += 1
        lookup.append(ac[j])

def randomworker(n : int, q : multiprocessing.Queue):
    size = n
    n *= 8
    last = 42.0
    while n > 0:
        a = array.array('f')
        size = min(size, n)
        for count in range(size):
            last = (last*IA + IC)%IM
            a.append(last*LOOKUP_SCALE/IM)
        q.put(a)
        n -= size

def randomize(ac : list, title : bytes, n : int, q : multiprocessing.Queue):
    lookup = []
    line_buffer = bytearray(LINE_LEN + 1)
    nprint = sys.stdout.buffer.write
    fill_lookup(lookup, ac)
    nprint(title)
    i = 0
    j = 0
    ai = 0
    randlength = -1
    while i < n:
        if j == LINE_LEN:
            line_buffer[j] = 10 # == \n
            nprint(line_buffer)
            j = 0
            line_buffer = bytearray(LINE_LEN + 1)
        if ai >= randlength:
            rands = q.get()
            randlength = len(rands)
            ai = 0
        r = rands[ai]
        k = int(r)
        ai += 1
        while lookup[k].c < r:
            k += 1
        line_buffer[j] = lookup[k].s
        i += 1
        j += 1
    nprint(line_buffer[:j] + b"\n")


class Freq(object):
    def __init__(self, s, p):
        self.s = ord(s); self.p = p; self.c = 0

ac = [Freq('a', 0.27), Freq('c', 0.12), Freq('g', 0.12), Freq('t', 0.27), 
      Freq('B', 0.02), Freq('D', 0.02), Freq('H', 0.02), Freq('K', 0.02), 
      Freq('M', 0.02), Freq('N', 0.02), Freq('R', 0.02), Freq('S', 0.02), 
      Freq('V', 0.02), Freq('W', 0.02), Freq('Y', 0.02)]

hs = [Freq('a', 0.302954942668), Freq('c', 0.1979883004921), 
      Freq('g', 0.1975473066391), Freq('t', 0.3015094502008)]

def main():
    try:
        n = int(sys.argv[-1])
    except:
        n = 500
    q = multiprocessing.Queue()
    randomfactory = multiprocessing.Process(target = randomworker, args = (n, q))
    randomfactory.start()
    repeat_fasta(alu, b">ONE Homo sapiens alu\n", n*2)
    randomize(ac, b">TWO IUB ambiguity codes\n", n*3, q)
    randomize(hs, b">THREE Homo sapiens frequency\n", n*5, q)

if __name__ == "__main__":
    main()
