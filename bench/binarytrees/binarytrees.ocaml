(* The Computer Language Benchmarks Game
 * http://benchmarksgame.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * Modified by Fabrice Le Fessant for
 *  - tree type more compact
 *  - better GC parameters
 *  - loops replaced by recursive functions
 *)

type 'a tree = Leaf of 'a | Node of 'a tree * 'a * 'a tree

let rec make d i =
  if d = 0 then Leaf i
  else
    let l = make (d-1) (2*i - 1) in
    let r = make (d-1) (2*i) in
      Node(l, i, r)

let rec check = function Leaf i -> i | Node(l, i, r) ->
  let i = i + check l in
    i - check r

let min_depth = 4
let n = if Array.length Sys.argv <> 2 then 0 else int_of_string Sys.argv.(1)
let max_depth = max (min_depth + 2) n
let stretch_depth = max_depth + 1

let _ =
  let gc = Gc.get () in
    gc.Gc.max_overhead <- 1000000;
    gc.Gc.space_overhead <- 500;
    gc.Gc.major_heap_increment <- 10_000_000;
    gc.Gc.minor_heap_size <- 10_000_000;
    Gc.set gc

let () =
  let c = check (make stretch_depth 0) in
  Printf.printf "stretch tree of depth %i\t check: %i\n" stretch_depth c

let long_lived_tree = make max_depth 0


let rec iter i niter c d =
  if i <= niter then
    let c = c + check(make d i) in
    let c = c + check(make d (-i)) in
    iter (i+1) niter c d
  else
    Printf.printf "%i\t trees of depth %i\t check: %i\n" (2 * niter) d c


let rec loop_depths d =
  let niter = 1 lsl (max_depth - d + min_depth) in
    iter 1 niter 0 d;
    if d < max_depth then
      loop_depths (d+2)

let () =
  flush stdout;
  loop_depths min_depth;
  Printf.printf "long lived tree of depth %i\t check: %i\n"
    max_depth (check long_lived_tree)

