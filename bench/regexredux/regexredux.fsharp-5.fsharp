// The Computer Language Benchmarks Game
// http://benchmarksgame.alioth.debian.org/
//
// regex-dna program contributed by David Grenier
// converted from regex-dna program
// parallelization by Peter Kese

open System.Text.RegularExpressions
open Microsoft.FSharp.Collections

let regex s = Regex (s, RegexOptions.Compiled)
let input = stdin.ReadToEnd ()
let text = (regex ">.*\n|\n").Replace (input, "")

let matchTasks = 
    [   "agggtaaa|tttaccct"
        "[cgt]gggtaaa|tttaccc[acg]"
        "a[act]ggtaaa|tttacc[agt]t"
        "ag[act]gtaaa|tttac[agt]ct"
        "agg[act]taaa|ttta[agt]cct"
        "aggg[acg]aaa|ttt[cgt]ccct"
        "agggt[cgt]aa|tt[acg]accct"
        "agggta[cgt]a|t[acg]taccct"
        "agggtaa[cgt]|[acg]ttaccct"]
    |> List.map (fun pattern () ->
        ((regex pattern).Matches text).Count
            |> sprintf "%s %i\n" pattern) 

let replaceTask () =
    [
        "tHa[Nt]", "<4>"
        "aND|caN|Ha[DS]|WaS", "<3>"
        "a[NSt]|BY", "<2>"
        "<[^>]*>", "|"
        "\\|[^|][^|]*\\|","-"]
    |> List.fold (fun s (pattern, replace) -> 
        (regex pattern).Replace (s, replace)) text
    |> String.length
    |> sprintf "\n%i\n%i\n%i\n" input.Length text.Length

replaceTask :: (matchTasks |> List.rev )
|> List.toArray
|> Array.Parallel.map (fun task -> task ())
|> Array.rev
|> Array.iter (printf "%s")
