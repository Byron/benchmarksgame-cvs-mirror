/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/
 
   contributed by Diederik van Arkel
*/
 
module pidigits

import StdEnv, LanguageShootout, BigInt

Start world
   # n           = argi
   # (io,world)  = stdio world
   # io          = digit 1 (toBigInt 1,toBigInt 0,toBigInt 0,toBigInt 1) n 0 0 io
   # (err,world) = fclose io world
   = world

digit :: Int (BigInt,BigInt,BigInt,BigInt) Int Int Int *File -> *File
digit k z 0 row col io
   = io <<< toString (repeatn (10-col) ' ') <<< "\t:" <<< (row+col) <<< "\n"
digit k z n row col io
   | safe z y
      | col == 10
         # row` = row + 10
         # io   = io <<< "\t:" <<< row` <<< "\n" <<< toString y
         = digit k (prod z y) (n-1) row` 1 io
         # io = io <<< toString y
         = digit k (prod z y) (n-1) row (col+1) io
      = digit (k+1) (cons z k) n row col io
where
   y = next z
   prod z n = comp (toBigInt 10,toBigInt -10 * n, toBigInt 0, toBigInt 1) z

floor_ev :: (BigInt,BigInt,BigInt,BigInt) BigInt -> BigInt
floor_ev (q, r, s, t) x = (q*x + r) / (s*x + t)
comp :: (BigInt,BigInt,BigInt,BigInt) (BigInt,BigInt,BigInt,BigInt) -> (BigInt,BigInt,BigInt,BigInt)
comp (q,r,s,t) (q`,r`,s`,t`) = (q*q` + r*s`, q*r` + r*t`, s*q` + t*s`, s*r` + t*t`)
next :: (BigInt,BigInt,BigInt,BigInt) -> BigInt
next z = floor_ev z (toBigInt 3)

safe z n = n == floor_ev z (toBigInt 4)
cons z k = let den = 2*k+1 in comp z (toBigInt k, toBigInt (2*den), toBigInt 0, toBigInt den)
