# The Computer Language Benchmarks Game
# http://benchmarksgame.alioth.debian.org
#
# Contributed by Aaron Tavistock

class Matcher
  def initialize(label)
    @label = label
    @regex = Regexp.new(label)
    @count = 0
  end
  
  def label
    @label
  end
  
  def increment_on_match(str)
    if str.match(@regex) 
      @count += 1
    end
  end
 
  def results
    %[#{@label} #{@count}] 
  end
end

seq = STDIN.read
origin_len = seq.size

seq.gsub!(/>.*\n|\n/,'')
clean_len = seq.size

matchers = [
  Matcher.new('agggtaaa|tttaccct'),
  Matcher.new('[cgt]gggtaaa|tttaccc[acg]'),
  Matcher.new('a[act]ggtaaa|tttacc[agt]t'),
  Matcher.new('ag[act]gtaaa|tttac[agt]ct'),
  Matcher.new('agg[act]taaa|ttta[agt]cct'),
  Matcher.new('aggg[acg]aaa|ttt[cgt]ccct'),
  Matcher.new('agggt[cgt]aa|tt[acg]accct'),
  Matcher.new('agggta[cgt]a|t[acg]taccct'),
  Matcher.new('agggtaa[cgt]|[acg]ttaccct')
]

aggregate_regex = Regexp.new( matchers.map(&:label).join('|') )
seq.gsub(aggregate_regex) do |match_string|
  matchers.each do |matcher|
    break if matcher.increment_on_match(match_string)
  end
end

replacements = {
  'B' => '(c|g|t)', 
  'D' => '(a|g|t)', 
  'H' => '(a|c|t)', 
  'K' => '(g|t)',
  'M' => '(a|c)', 
  'N' => '(a|c|g|t)', 
  'R' => '(a|g)', 
  'S' => '(c|t)',
  'V' => '(a|c|g)', 
  'W' => '(a|t)', 
  'Y' => '(c|t)'
}
seq.gsub!(Regexp.new(replacements.keys.join('|')), replacements)

puts "#{matchers.map(&:results).join("\n")}\n\n#{origin_len}\n#{clean_len}\n#{seq.size}"
