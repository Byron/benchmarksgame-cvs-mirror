/* The Computer Language Shootout
   http://shootout.alioth.debian.org/ 
 
   contributed by Isaac Gouy (Clean novice)
   corrected by John van Groningen
*/

module binarytrees
import StdEnv, LanguageShootout

Start world
   # max`          = max (min`+2) argi
   # stretch`      = max` + 1
   # (io,world)    = stdio world
   #! io           = showItemCheck stretch` (bottomup 0 stretch`) "stretch tree of depth " io
   #! longLived    = bottomup 0 max`
   #! io           = depthloop min` max` io
   #! io           = showItemCheck max` longLived "long lived tree of depth " io		
   # (error,world) = fclose io world
   = world		

min` = 4	
	
showItemCheck d a s io
   = io <<< s <<< toString (d) <<<
      "\t check: " <<< toString (itemcheck a) <<< "\n"	
		
showCheck i d check io
   = io <<< toString (2*i) <<< "\t trees of depth " <<< 
      toString (d) <<< "\t check: " <<< toString (check) <<< "\n"						
				
depthloop d m io
   | d > m  = io
            = depthloop (d+2) m (showCheck n d check io)	
   where 
   n = 1 << (m - d + min`)
   check = sumloop n d 0	

sumloop :: !Int !Int !Int -> Int	
sumloop n d sum
   | n > 0	= sumloop (n-1) d (sum + check + check`)	
            = sum
   where 
   check = itemcheck (bottomup n d)
   check` = itemcheck (bottomup (-1*n) d)	   


:: Tree = TreeNode !Int !Tree !Tree | Nil

bottomup :: !Int !Int -> Tree
bottomup i d
   | d == 0 = TreeNode i Nil Nil
            = TreeNode i (bottomup (2*i-1)(d-1)) (bottomup (2*i)(d-1))

itemcheck Nil = 0
itemcheck (TreeNode a left right) = a + itemcheck(left) - itemcheck(right)					
